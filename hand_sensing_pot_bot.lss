
hand_sensing_pot_bot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000033  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000245  00000000  00000000  0000055b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000109  00000000  00000000  000007a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000289  00000000  00000000  000008a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000eb  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000160  00000000  00000000  00000c5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initialise>:
#include<avr/io.h>
#include<util/delay.h>
void initialise()
{
	ADCSRA=ADCSRA|(0b00000001<<ADEN); // Enable ADC
  6c:	37 9a       	sbi	0x06, 7	; 6
	ADCSRA=ADCSRA|(0b00000001<<ADPS2);//Sampling rate select
  6e:	32 9a       	sbi	0x06, 2	; 6
	ADMUX|=(0b00000001<<REFS0);// Voltage reference
  70:	3e 9a       	sbi	0x07, 6	; 7
}
  72:	08 95       	ret

00000074 <read>:
int read()
{
	int p=0b00000011; 
	ADMUX=ADMUX|p; // Input pin
  74:	87 b1       	in	r24, 0x07	; 7
  76:	83 60       	ori	r24, 0x03	; 3
  78:	87 b9       	out	0x07, r24	; 7
	ADCSRA=ADCSRA|(0b00000001<<ADSC); //Start of Conversion
  7a:	36 9a       	sbi	0x06, 6	; 6
	while(ADCSRA&(0b00000001<<ADIF)==0); // Until conversion stops
  7c:	86 b1       	in	r24, 0x06	; 6
	ADCSRA=ADCSRA|(0b00000001<<ADIF);// Clearing ADIF pin
  7e:	34 9a       	sbi	0x06, 4	; 6
	return(ADC);
  80:	24 b1       	in	r18, 0x04	; 4
  82:	35 b1       	in	r19, 0x05	; 5
}	
  84:	c9 01       	movw	r24, r18
  86:	08 95       	ret

00000088 <main>:
	
void main()
{
  88:	7f 92       	push	r7
  8a:	8f 92       	push	r8
  8c:	9f 92       	push	r9
  8e:	af 92       	push	r10
  90:	bf 92       	push	r11
  92:	cf 92       	push	r12
  94:	df 92       	push	r13
  96:	ef 92       	push	r14
  98:	ff 92       	push	r15
  9a:	0f 93       	push	r16
  9c:	1f 93       	push	r17
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
    DDRD=0b00000000;
  a2:	11 ba       	out	0x11, r1	; 17
	DDRB=0b11111111;
  a4:	8f ef       	ldi	r24, 0xFF	; 255
  a6:	87 bb       	out	0x17, r24	; 23
	PORTD=0b11111111;
  a8:	82 bb       	out	0x12, r24	; 18
	initialise();
  aa:	0e 94 36 00 	call	0x6c	; 0x6c <initialise>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ae:	84 ed       	ldi	r24, 0xD4	; 212
  b0:	90 e3       	ldi	r25, 0x30	; 48
  b2:	01 97       	sbiw	r24, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <main+0x2a>
		TOFF=a;
		TON=T-TOFF;
		c=PIND;
		if(c==0b11111110)
		{
			PORTB=0b00001010;
  b6:	3a e0       	ldi	r19, 0x0A	; 10
  b8:	73 2e       	mov	r7, r19
			_delay_ms(TON*3);
  ba:	29 e1       	ldi	r18, 0x19	; 25
  bc:	82 2e       	mov	r8, r18
  be:	91 2c       	mov	r9, r1
	_delay_ms(50);
	unsigned int a,p,T,TON,TOFF;
	int c;
	while(1)
	{
		p=read();
  c0:	0e 94 3a 00 	call	0x74	; 0x74 <read>
  c4:	9c 01       	movw	r18, r24
		a=p/40;
		T=25.6;
		TOFF=a;
		TON=T-TOFF;
		c=PIND;
  c6:	80 b3       	in	r24, 0x10	; 16
		if(c==0b11111110)
  c8:	8e 3f       	cpi	r24, 0xFE	; 254
  ca:	09 f0       	breq	.+2      	; 0xce <main+0x46>
  cc:	92 c0       	rjmp	.+292    	; 0x1f2 <main+0x16a>
	unsigned int a,p,T,TON,TOFF;
	int c;
	while(1)
	{
		p=read();
		a=p/40;
  ce:	c9 01       	movw	r24, r18
  d0:	68 e2       	ldi	r22, 0x28	; 40
  d2:	70 e0       	ldi	r23, 0x00	; 0
  d4:	0e 94 44 02 	call	0x488	; 0x488 <__udivmodhi4>
  d8:	eb 01       	movw	r28, r22
		TOFF=a;
		TON=T-TOFF;
		c=PIND;
		if(c==0b11111110)
		{
			PORTB=0b00001010;
  da:	78 ba       	out	0x18, r7	; 24
			_delay_ms(TON*3);
  dc:	94 01       	movw	r18, r8
  de:	26 1b       	sub	r18, r22
  e0:	37 0b       	sbc	r19, r23
  e2:	b9 01       	movw	r22, r18
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	62 0f       	add	r22, r18
  ea:	73 1f       	adc	r23, r19
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 2b 01 	call	0x256	; 0x256 <__floatunsisf>
  f4:	5b 01       	movw	r10, r22
  f6:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
  f8:	20 e0       	ldi	r18, 0x00	; 0
  fa:	30 e0       	ldi	r19, 0x00	; 0
  fc:	4a e7       	ldi	r20, 0x7A	; 122
  fe:	53 e4       	ldi	r21, 0x43	; 67
 100:	0e 94 b9 01 	call	0x372	; 0x372 <__mulsf3>
 104:	7b 01       	movw	r14, r22
 106:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 108:	20 e0       	ldi	r18, 0x00	; 0
 10a:	30 e0       	ldi	r19, 0x00	; 0
 10c:	40 e8       	ldi	r20, 0x80	; 128
 10e:	5f e3       	ldi	r21, 0x3F	; 63
 110:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__cmpsf2>
 114:	88 23       	and	r24, r24
 116:	1c f4       	brge	.+6      	; 0x11e <main+0x96>
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	22 c0       	rjmp	.+68     	; 0x162 <main+0xda>
		__ticks = 1;
	else if (__tmp > 65535)
 11e:	c8 01       	movw	r24, r16
 120:	b7 01       	movw	r22, r14
 122:	20 e0       	ldi	r18, 0x00	; 0
 124:	3f ef       	ldi	r19, 0xFF	; 255
 126:	4f e7       	ldi	r20, 0x7F	; 127
 128:	57 e4       	ldi	r21, 0x47	; 71
 12a:	0e 94 b5 01 	call	0x36a	; 0x36a <__gesf2>
 12e:	18 16       	cp	r1, r24
 130:	a4 f4       	brge	.+40     	; 0x15a <main+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 132:	c6 01       	movw	r24, r12
 134:	b5 01       	movw	r22, r10
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	40 e2       	ldi	r20, 0x20	; 32
 13c:	51 e4       	ldi	r21, 0x41	; 65
 13e:	0e 94 b9 01 	call	0x372	; 0x372 <__mulsf3>
 142:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fixunssfsi>
 146:	05 c0       	rjmp	.+10     	; 0x152 <main+0xca>
 148:	c4 01       	movw	r24, r8
 14a:	01 97       	sbiw	r24, 0x01	; 1
 14c:	f1 f7       	brne	.-4      	; 0x14a <main+0xc2>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14e:	61 50       	subi	r22, 0x01	; 1
 150:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 152:	61 15       	cp	r22, r1
 154:	71 05       	cpc	r23, r1
 156:	c1 f7       	brne	.-16     	; 0x148 <main+0xc0>
 158:	07 c0       	rjmp	.+14     	; 0x168 <main+0xe0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 15a:	c8 01       	movw	r24, r16
 15c:	b7 01       	movw	r22, r14
 15e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fixunssfsi>
 162:	cb 01       	movw	r24, r22
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0xdc>
			PORTB=0b00000000;
 168:	18 ba       	out	0x18, r1	; 24
			_delay_ms(TOFF*3);
 16a:	be 01       	movw	r22, r28
 16c:	66 0f       	add	r22, r22
 16e:	77 1f       	adc	r23, r23
 170:	6c 0f       	add	r22, r28
 172:	7d 1f       	adc	r23, r29
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	0e 94 2b 01 	call	0x256	; 0x256 <__floatunsisf>
 17c:	5b 01       	movw	r10, r22
 17e:	6c 01       	movw	r12, r24
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
 180:	20 e0       	ldi	r18, 0x00	; 0
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	4a e7       	ldi	r20, 0x7A	; 122
 186:	53 e4       	ldi	r21, 0x43	; 67
 188:	0e 94 b9 01 	call	0x372	; 0x372 <__mulsf3>
 18c:	7b 01       	movw	r14, r22
 18e:	8c 01       	movw	r16, r24
	if (__tmp < 1.0)
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	40 e8       	ldi	r20, 0x80	; 128
 196:	5f e3       	ldi	r21, 0x3F	; 63
 198:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <__cmpsf2>
 19c:	88 23       	and	r24, r24
 19e:	1c f4       	brge	.+6      	; 0x1a6 <main+0x11e>
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	22 c0       	rjmp	.+68     	; 0x1ea <main+0x162>
		__ticks = 1;
	else if (__tmp > 65535)
 1a6:	c8 01       	movw	r24, r16
 1a8:	b7 01       	movw	r22, r14
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	3f ef       	ldi	r19, 0xFF	; 255
 1ae:	4f e7       	ldi	r20, 0x7F	; 127
 1b0:	57 e4       	ldi	r21, 0x47	; 71
 1b2:	0e 94 b5 01 	call	0x36a	; 0x36a <__gesf2>
 1b6:	18 16       	cp	r1, r24
 1b8:	a4 f4       	brge	.+40     	; 0x1e2 <main+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 1ba:	c6 01       	movw	r24, r12
 1bc:	b5 01       	movw	r22, r10
 1be:	20 e0       	ldi	r18, 0x00	; 0
 1c0:	30 e0       	ldi	r19, 0x00	; 0
 1c2:	40 e2       	ldi	r20, 0x20	; 32
 1c4:	51 e4       	ldi	r21, 0x41	; 65
 1c6:	0e 94 b9 01 	call	0x372	; 0x372 <__mulsf3>
 1ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fixunssfsi>
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <main+0x152>
 1d0:	c4 01       	movw	r24, r8
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <main+0x14a>
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d6:	61 50       	subi	r22, 0x01	; 1
 1d8:	70 40       	sbci	r23, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	61 15       	cp	r22, r1
 1dc:	71 05       	cpc	r23, r1
 1de:	c1 f7       	brne	.-16     	; 0x1d0 <main+0x148>
 1e0:	6f cf       	rjmp	.-290    	; 0xc0 <main+0x38>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 1e2:	c8 01       	movw	r24, r16
 1e4:	b7 01       	movw	r22, r14
 1e6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <__fixunssfsi>
 1ea:	cb 01       	movw	r24, r22
 1ec:	01 97       	sbiw	r24, 0x01	; 1
 1ee:	f1 f7       	brne	.-4      	; 0x1ec <main+0x164>
 1f0:	67 cf       	rjmp	.-306    	; 0xc0 <main+0x38>
	    }
		else
		{
			PORTB=0b00001010;
 1f2:	78 ba       	out	0x18, r7	; 24
 1f4:	65 cf       	rjmp	.-310    	; 0xc0 <main+0x38>

000001f6 <__cmpsf2>:
 1f6:	6c d0       	rcall	.+216    	; 0x2d0 <__fp_cmp>
 1f8:	08 f4       	brcc	.+2      	; 0x1fc <__cmpsf2+0x6>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	08 95       	ret

000001fe <__fixunssfsi>:
 1fe:	94 d0       	rcall	.+296    	; 0x328 <__fp_splitA>
 200:	88 f0       	brcs	.+34     	; 0x224 <__fixunssfsi+0x26>
 202:	9f 57       	subi	r25, 0x7F	; 127
 204:	90 f0       	brcs	.+36     	; 0x22a <__fixunssfsi+0x2c>
 206:	b9 2f       	mov	r27, r25
 208:	99 27       	eor	r25, r25
 20a:	b7 51       	subi	r27, 0x17	; 23
 20c:	a0 f0       	brcs	.+40     	; 0x236 <__fixunssfsi+0x38>
 20e:	d1 f0       	breq	.+52     	; 0x244 <__fixunssfsi+0x46>
 210:	66 0f       	add	r22, r22
 212:	77 1f       	adc	r23, r23
 214:	88 1f       	adc	r24, r24
 216:	99 1f       	adc	r25, r25
 218:	1a f0       	brmi	.+6      	; 0x220 <__fixunssfsi+0x22>
 21a:	ba 95       	dec	r27
 21c:	c9 f7       	brne	.-14     	; 0x210 <__fixunssfsi+0x12>
 21e:	12 c0       	rjmp	.+36     	; 0x244 <__fixunssfsi+0x46>
 220:	b1 30       	cpi	r27, 0x01	; 1
 222:	81 f0       	breq	.+32     	; 0x244 <__fixunssfsi+0x46>
 224:	9b d0       	rcall	.+310    	; 0x35c <__fp_zero>
 226:	b1 e0       	ldi	r27, 0x01	; 1
 228:	08 95       	ret
 22a:	98 c0       	rjmp	.+304    	; 0x35c <__fp_zero>
 22c:	67 2f       	mov	r22, r23
 22e:	78 2f       	mov	r23, r24
 230:	88 27       	eor	r24, r24
 232:	b8 5f       	subi	r27, 0xF8	; 248
 234:	39 f0       	breq	.+14     	; 0x244 <__fixunssfsi+0x46>
 236:	b9 3f       	cpi	r27, 0xF9	; 249
 238:	cc f3       	brlt	.-14     	; 0x22c <__fixunssfsi+0x2e>
 23a:	86 95       	lsr	r24
 23c:	77 95       	ror	r23
 23e:	67 95       	ror	r22
 240:	b3 95       	inc	r27
 242:	d9 f7       	brne	.-10     	; 0x23a <__fixunssfsi+0x3c>
 244:	3e f4       	brtc	.+14     	; 0x254 <__fixunssfsi+0x56>
 246:	90 95       	com	r25
 248:	80 95       	com	r24
 24a:	70 95       	com	r23
 24c:	61 95       	neg	r22
 24e:	7f 4f       	sbci	r23, 0xFF	; 255
 250:	8f 4f       	sbci	r24, 0xFF	; 255
 252:	9f 4f       	sbci	r25, 0xFF	; 255
 254:	08 95       	ret

00000256 <__floatunsisf>:
 256:	e8 94       	clt
 258:	09 c0       	rjmp	.+18     	; 0x26c <__floatsisf+0x12>

0000025a <__floatsisf>:
 25a:	97 fb       	bst	r25, 7
 25c:	3e f4       	brtc	.+14     	; 0x26c <__floatsisf+0x12>
 25e:	90 95       	com	r25
 260:	80 95       	com	r24
 262:	70 95       	com	r23
 264:	61 95       	neg	r22
 266:	7f 4f       	sbci	r23, 0xFF	; 255
 268:	8f 4f       	sbci	r24, 0xFF	; 255
 26a:	9f 4f       	sbci	r25, 0xFF	; 255
 26c:	99 23       	and	r25, r25
 26e:	a9 f0       	breq	.+42     	; 0x29a <__floatsisf+0x40>
 270:	f9 2f       	mov	r31, r25
 272:	96 e9       	ldi	r25, 0x96	; 150
 274:	bb 27       	eor	r27, r27
 276:	93 95       	inc	r25
 278:	f6 95       	lsr	r31
 27a:	87 95       	ror	r24
 27c:	77 95       	ror	r23
 27e:	67 95       	ror	r22
 280:	b7 95       	ror	r27
 282:	f1 11       	cpse	r31, r1
 284:	f8 cf       	rjmp	.-16     	; 0x276 <__floatsisf+0x1c>
 286:	fa f4       	brpl	.+62     	; 0x2c6 <__floatsisf+0x6c>
 288:	bb 0f       	add	r27, r27
 28a:	11 f4       	brne	.+4      	; 0x290 <__floatsisf+0x36>
 28c:	60 ff       	sbrs	r22, 0
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <__floatsisf+0x6c>
 290:	6f 5f       	subi	r22, 0xFF	; 255
 292:	7f 4f       	sbci	r23, 0xFF	; 255
 294:	8f 4f       	sbci	r24, 0xFF	; 255
 296:	9f 4f       	sbci	r25, 0xFF	; 255
 298:	16 c0       	rjmp	.+44     	; 0x2c6 <__floatsisf+0x6c>
 29a:	88 23       	and	r24, r24
 29c:	11 f0       	breq	.+4      	; 0x2a2 <__floatsisf+0x48>
 29e:	96 e9       	ldi	r25, 0x96	; 150
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <__floatsisf+0x6a>
 2a2:	77 23       	and	r23, r23
 2a4:	21 f0       	breq	.+8      	; 0x2ae <__floatsisf+0x54>
 2a6:	9e e8       	ldi	r25, 0x8E	; 142
 2a8:	87 2f       	mov	r24, r23
 2aa:	76 2f       	mov	r23, r22
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <__floatsisf+0x5e>
 2ae:	66 23       	and	r22, r22
 2b0:	71 f0       	breq	.+28     	; 0x2ce <__floatsisf+0x74>
 2b2:	96 e8       	ldi	r25, 0x86	; 134
 2b4:	86 2f       	mov	r24, r22
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	2a f0       	brmi	.+10     	; 0x2c6 <__floatsisf+0x6c>
 2bc:	9a 95       	dec	r25
 2be:	66 0f       	add	r22, r22
 2c0:	77 1f       	adc	r23, r23
 2c2:	88 1f       	adc	r24, r24
 2c4:	da f7       	brpl	.-10     	; 0x2bc <__floatsisf+0x62>
 2c6:	88 0f       	add	r24, r24
 2c8:	96 95       	lsr	r25
 2ca:	87 95       	ror	r24
 2cc:	97 f9       	bld	r25, 7
 2ce:	08 95       	ret

000002d0 <__fp_cmp>:
 2d0:	99 0f       	add	r25, r25
 2d2:	00 08       	sbc	r0, r0
 2d4:	55 0f       	add	r21, r21
 2d6:	aa 0b       	sbc	r26, r26
 2d8:	e0 e8       	ldi	r30, 0x80	; 128
 2da:	fe ef       	ldi	r31, 0xFE	; 254
 2dc:	16 16       	cp	r1, r22
 2de:	17 06       	cpc	r1, r23
 2e0:	e8 07       	cpc	r30, r24
 2e2:	f9 07       	cpc	r31, r25
 2e4:	c0 f0       	brcs	.+48     	; 0x316 <__fp_cmp+0x46>
 2e6:	12 16       	cp	r1, r18
 2e8:	13 06       	cpc	r1, r19
 2ea:	e4 07       	cpc	r30, r20
 2ec:	f5 07       	cpc	r31, r21
 2ee:	98 f0       	brcs	.+38     	; 0x316 <__fp_cmp+0x46>
 2f0:	62 1b       	sub	r22, r18
 2f2:	73 0b       	sbc	r23, r19
 2f4:	84 0b       	sbc	r24, r20
 2f6:	95 0b       	sbc	r25, r21
 2f8:	39 f4       	brne	.+14     	; 0x308 <__fp_cmp+0x38>
 2fa:	0a 26       	eor	r0, r26
 2fc:	61 f0       	breq	.+24     	; 0x316 <__fp_cmp+0x46>
 2fe:	23 2b       	or	r18, r19
 300:	24 2b       	or	r18, r20
 302:	25 2b       	or	r18, r21
 304:	21 f4       	brne	.+8      	; 0x30e <__fp_cmp+0x3e>
 306:	08 95       	ret
 308:	0a 26       	eor	r0, r26
 30a:	09 f4       	brne	.+2      	; 0x30e <__fp_cmp+0x3e>
 30c:	a1 40       	sbci	r26, 0x01	; 1
 30e:	a6 95       	lsr	r26
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	81 1d       	adc	r24, r1
 314:	81 1d       	adc	r24, r1
 316:	08 95       	ret

00000318 <__fp_split3>:
 318:	57 fd       	sbrc	r21, 7
 31a:	90 58       	subi	r25, 0x80	; 128
 31c:	44 0f       	add	r20, r20
 31e:	55 1f       	adc	r21, r21
 320:	59 f0       	breq	.+22     	; 0x338 <__fp_splitA+0x10>
 322:	5f 3f       	cpi	r21, 0xFF	; 255
 324:	71 f0       	breq	.+28     	; 0x342 <__fp_splitA+0x1a>
 326:	47 95       	ror	r20

00000328 <__fp_splitA>:
 328:	88 0f       	add	r24, r24
 32a:	97 fb       	bst	r25, 7
 32c:	99 1f       	adc	r25, r25
 32e:	61 f0       	breq	.+24     	; 0x348 <__fp_splitA+0x20>
 330:	9f 3f       	cpi	r25, 0xFF	; 255
 332:	79 f0       	breq	.+30     	; 0x352 <__fp_splitA+0x2a>
 334:	87 95       	ror	r24
 336:	08 95       	ret
 338:	12 16       	cp	r1, r18
 33a:	13 06       	cpc	r1, r19
 33c:	14 06       	cpc	r1, r20
 33e:	55 1f       	adc	r21, r21
 340:	f2 cf       	rjmp	.-28     	; 0x326 <__fp_split3+0xe>
 342:	46 95       	lsr	r20
 344:	f1 df       	rcall	.-30     	; 0x328 <__fp_splitA>
 346:	08 c0       	rjmp	.+16     	; 0x358 <__fp_splitA+0x30>
 348:	16 16       	cp	r1, r22
 34a:	17 06       	cpc	r1, r23
 34c:	18 06       	cpc	r1, r24
 34e:	99 1f       	adc	r25, r25
 350:	f1 cf       	rjmp	.-30     	; 0x334 <__fp_splitA+0xc>
 352:	86 95       	lsr	r24
 354:	71 05       	cpc	r23, r1
 356:	61 05       	cpc	r22, r1
 358:	08 94       	sec
 35a:	08 95       	ret

0000035c <__fp_zero>:
 35c:	e8 94       	clt

0000035e <__fp_szero>:
 35e:	bb 27       	eor	r27, r27
 360:	66 27       	eor	r22, r22
 362:	77 27       	eor	r23, r23
 364:	cb 01       	movw	r24, r22
 366:	97 f9       	bld	r25, 7
 368:	08 95       	ret

0000036a <__gesf2>:
 36a:	b2 df       	rcall	.-156    	; 0x2d0 <__fp_cmp>
 36c:	08 f4       	brcc	.+2      	; 0x370 <__gesf2+0x6>
 36e:	8f ef       	ldi	r24, 0xFF	; 255
 370:	08 95       	ret

00000372 <__mulsf3>:
 372:	0b d0       	rcall	.+22     	; 0x38a <__mulsf3x>
 374:	78 c0       	rjmp	.+240    	; 0x466 <__fp_round>
 376:	69 d0       	rcall	.+210    	; 0x44a <__fp_pscA>
 378:	28 f0       	brcs	.+10     	; 0x384 <__mulsf3+0x12>
 37a:	6e d0       	rcall	.+220    	; 0x458 <__fp_pscB>
 37c:	18 f0       	brcs	.+6      	; 0x384 <__mulsf3+0x12>
 37e:	95 23       	and	r25, r21
 380:	09 f0       	breq	.+2      	; 0x384 <__mulsf3+0x12>
 382:	5a c0       	rjmp	.+180    	; 0x438 <__fp_inf>
 384:	5f c0       	rjmp	.+190    	; 0x444 <__fp_nan>
 386:	11 24       	eor	r1, r1
 388:	ea cf       	rjmp	.-44     	; 0x35e <__fp_szero>

0000038a <__mulsf3x>:
 38a:	c6 df       	rcall	.-116    	; 0x318 <__fp_split3>
 38c:	a0 f3       	brcs	.-24     	; 0x376 <__mulsf3+0x4>

0000038e <__mulsf3_pse>:
 38e:	95 9f       	mul	r25, r21
 390:	d1 f3       	breq	.-12     	; 0x386 <__mulsf3+0x14>
 392:	95 0f       	add	r25, r21
 394:	50 e0       	ldi	r21, 0x00	; 0
 396:	55 1f       	adc	r21, r21
 398:	62 9f       	mul	r22, r18
 39a:	f0 01       	movw	r30, r0
 39c:	72 9f       	mul	r23, r18
 39e:	bb 27       	eor	r27, r27
 3a0:	f0 0d       	add	r31, r0
 3a2:	b1 1d       	adc	r27, r1
 3a4:	63 9f       	mul	r22, r19
 3a6:	aa 27       	eor	r26, r26
 3a8:	f0 0d       	add	r31, r0
 3aa:	b1 1d       	adc	r27, r1
 3ac:	aa 1f       	adc	r26, r26
 3ae:	64 9f       	mul	r22, r20
 3b0:	66 27       	eor	r22, r22
 3b2:	b0 0d       	add	r27, r0
 3b4:	a1 1d       	adc	r26, r1
 3b6:	66 1f       	adc	r22, r22
 3b8:	82 9f       	mul	r24, r18
 3ba:	22 27       	eor	r18, r18
 3bc:	b0 0d       	add	r27, r0
 3be:	a1 1d       	adc	r26, r1
 3c0:	62 1f       	adc	r22, r18
 3c2:	73 9f       	mul	r23, r19
 3c4:	b0 0d       	add	r27, r0
 3c6:	a1 1d       	adc	r26, r1
 3c8:	62 1f       	adc	r22, r18
 3ca:	83 9f       	mul	r24, r19
 3cc:	a0 0d       	add	r26, r0
 3ce:	61 1d       	adc	r22, r1
 3d0:	22 1f       	adc	r18, r18
 3d2:	74 9f       	mul	r23, r20
 3d4:	33 27       	eor	r19, r19
 3d6:	a0 0d       	add	r26, r0
 3d8:	61 1d       	adc	r22, r1
 3da:	23 1f       	adc	r18, r19
 3dc:	84 9f       	mul	r24, r20
 3de:	60 0d       	add	r22, r0
 3e0:	21 1d       	adc	r18, r1
 3e2:	82 2f       	mov	r24, r18
 3e4:	76 2f       	mov	r23, r22
 3e6:	6a 2f       	mov	r22, r26
 3e8:	11 24       	eor	r1, r1
 3ea:	9f 57       	subi	r25, 0x7F	; 127
 3ec:	50 40       	sbci	r21, 0x00	; 0
 3ee:	8a f0       	brmi	.+34     	; 0x412 <__mulsf3_pse+0x84>
 3f0:	e1 f0       	breq	.+56     	; 0x42a <__mulsf3_pse+0x9c>
 3f2:	88 23       	and	r24, r24
 3f4:	4a f0       	brmi	.+18     	; 0x408 <__mulsf3_pse+0x7a>
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	bb 1f       	adc	r27, r27
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	91 50       	subi	r25, 0x01	; 1
 404:	50 40       	sbci	r21, 0x00	; 0
 406:	a9 f7       	brne	.-22     	; 0x3f2 <__mulsf3_pse+0x64>
 408:	9e 3f       	cpi	r25, 0xFE	; 254
 40a:	51 05       	cpc	r21, r1
 40c:	70 f0       	brcs	.+28     	; 0x42a <__mulsf3_pse+0x9c>
 40e:	14 c0       	rjmp	.+40     	; 0x438 <__fp_inf>
 410:	a6 cf       	rjmp	.-180    	; 0x35e <__fp_szero>
 412:	5f 3f       	cpi	r21, 0xFF	; 255
 414:	ec f3       	brlt	.-6      	; 0x410 <__mulsf3_pse+0x82>
 416:	98 3e       	cpi	r25, 0xE8	; 232
 418:	dc f3       	brlt	.-10     	; 0x410 <__mulsf3_pse+0x82>
 41a:	86 95       	lsr	r24
 41c:	77 95       	ror	r23
 41e:	67 95       	ror	r22
 420:	b7 95       	ror	r27
 422:	f7 95       	ror	r31
 424:	e7 95       	ror	r30
 426:	9f 5f       	subi	r25, 0xFF	; 255
 428:	c1 f7       	brne	.-16     	; 0x41a <__mulsf3_pse+0x8c>
 42a:	fe 2b       	or	r31, r30
 42c:	88 0f       	add	r24, r24
 42e:	91 1d       	adc	r25, r1
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	97 f9       	bld	r25, 7
 436:	08 95       	ret

00000438 <__fp_inf>:
 438:	97 f9       	bld	r25, 7
 43a:	9f 67       	ori	r25, 0x7F	; 127
 43c:	80 e8       	ldi	r24, 0x80	; 128
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	60 e0       	ldi	r22, 0x00	; 0
 442:	08 95       	ret

00000444 <__fp_nan>:
 444:	9f ef       	ldi	r25, 0xFF	; 255
 446:	80 ec       	ldi	r24, 0xC0	; 192
 448:	08 95       	ret

0000044a <__fp_pscA>:
 44a:	00 24       	eor	r0, r0
 44c:	0a 94       	dec	r0
 44e:	16 16       	cp	r1, r22
 450:	17 06       	cpc	r1, r23
 452:	18 06       	cpc	r1, r24
 454:	09 06       	cpc	r0, r25
 456:	08 95       	ret

00000458 <__fp_pscB>:
 458:	00 24       	eor	r0, r0
 45a:	0a 94       	dec	r0
 45c:	12 16       	cp	r1, r18
 45e:	13 06       	cpc	r1, r19
 460:	14 06       	cpc	r1, r20
 462:	05 06       	cpc	r0, r21
 464:	08 95       	ret

00000466 <__fp_round>:
 466:	09 2e       	mov	r0, r25
 468:	03 94       	inc	r0
 46a:	00 0c       	add	r0, r0
 46c:	11 f4       	brne	.+4      	; 0x472 <__fp_round+0xc>
 46e:	88 23       	and	r24, r24
 470:	52 f0       	brmi	.+20     	; 0x486 <__fp_round+0x20>
 472:	bb 0f       	add	r27, r27
 474:	40 f4       	brcc	.+16     	; 0x486 <__fp_round+0x20>
 476:	bf 2b       	or	r27, r31
 478:	11 f4       	brne	.+4      	; 0x47e <__fp_round+0x18>
 47a:	60 ff       	sbrs	r22, 0
 47c:	04 c0       	rjmp	.+8      	; 0x486 <__fp_round+0x20>
 47e:	6f 5f       	subi	r22, 0xFF	; 255
 480:	7f 4f       	sbci	r23, 0xFF	; 255
 482:	8f 4f       	sbci	r24, 0xFF	; 255
 484:	9f 4f       	sbci	r25, 0xFF	; 255
 486:	08 95       	ret

00000488 <__udivmodhi4>:
 488:	aa 1b       	sub	r26, r26
 48a:	bb 1b       	sub	r27, r27
 48c:	51 e1       	ldi	r21, 0x11	; 17
 48e:	07 c0       	rjmp	.+14     	; 0x49e <__udivmodhi4_ep>

00000490 <__udivmodhi4_loop>:
 490:	aa 1f       	adc	r26, r26
 492:	bb 1f       	adc	r27, r27
 494:	a6 17       	cp	r26, r22
 496:	b7 07       	cpc	r27, r23
 498:	10 f0       	brcs	.+4      	; 0x49e <__udivmodhi4_ep>
 49a:	a6 1b       	sub	r26, r22
 49c:	b7 0b       	sbc	r27, r23

0000049e <__udivmodhi4_ep>:
 49e:	88 1f       	adc	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	5a 95       	dec	r21
 4a4:	a9 f7       	brne	.-22     	; 0x490 <__udivmodhi4_loop>
 4a6:	80 95       	com	r24
 4a8:	90 95       	com	r25
 4aa:	bc 01       	movw	r22, r24
 4ac:	cd 01       	movw	r24, r26
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
